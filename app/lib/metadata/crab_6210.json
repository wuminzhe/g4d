{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "account",
                "AccountId20"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 20]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 1,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 2,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U8"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": [

                      ]
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 4,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U32"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 6,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U128"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 9,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proof_size",
                      "type": 9,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 9,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 10
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 10,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U64"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 12,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 12,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 13,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 15,
                      "typeName": "Vec<DigestItem>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 15,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 16
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 17,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 18,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 19
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 175,
                      "typeName": "Phase",
                      "docs": [

                      ]
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 150,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "crab_runtime",
                "RuntimeEvent"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "pallet_transaction_payment::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "pallet_assets::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 37,
                          "typeName": "pallet_vesting::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 38,
                          "typeName": "darwinia_deposit::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountMigration",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "darwinia_account_migration::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DarwiniaStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 47,
                          "typeName": "darwinia_staking::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 49,
                          "typeName": "pallet_session::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": "darwinia_ecdsa_authority::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "pallet_democracy::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 66,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "pallet_tips::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 74,
                          "typeName": "pallet_utility::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "pallet_identity::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 76,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 78,
                          "typeName": "pallet_preimage::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 79,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 81,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "pallet_xcm::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 137,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 138,
                          "typeName": "pallet_ethereum::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 148,
                          "typeName": "pallet_evm::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePolkadotParachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 151,
                          "typeName": "pallet_bridge_parachains::Event<Runtime, pallet_bridge_parachains::\nInstance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeDarwiniaMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 153,
                          "typeName": "pallet_bridge_messages::Event<Runtime, pallet_bridge_messages::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeDarwiniaDispatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 164,
                          "typeName": "pallet_bridge_dispatch::Event<Runtime, pallet_bridge_dispatch::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DarwiniaFeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 169,
                          "typeName": "pallet_fee_market::Event<Runtime, pallet_fee_market::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass",
                      "docs": [

                      ]
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Operational",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mandatory",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "No",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "ModuleError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoProviders",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "TokenError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": "ArithmeticError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": "TransactionalError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Exhausted",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Corruption",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unavailable",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "error",
                      "type": 17,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsupported",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Overflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoLayer",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dmq_head",
                          "type": 11,
                          "typeName": "relay_chain::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination_status",
                          "type": 33,
                          "typeName": "Status",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "AccountsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "accounts_destroyed",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "accounts_remaining",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Accounts were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "ApprovalsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approvals_destroyed",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approvals_remaining",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Approvals were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "DestructionStarted",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An asset class is in the process of being destroyed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "symbol",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 10,
                          "typeName": "T::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "Bool"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "darwinia_deposit",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositCreated",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit_id",
                          "type": 39,
                          "typeName": "DepositId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "start_time",
                          "type": 6,
                          "typeName": "Moment",
                          "docs": [

                          ]
                        },
                        {
                          "name": "expired_time",
                          "type": 6,
                          "typeName": "Moment",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_reward",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new deposit has been created."
                      ]
                    },
                    {
                      "name": "DepositClaimed",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit_id",
                          "type": 39,
                          "typeName": "DepositId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An expired deposit has been claimed."
                      ]
                    },
                    {
                      "name": "DepositClaimedWithPenalty",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit_id",
                          "type": 39,
                          "typeName": "DepositId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_penalty",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An unexpired deposit has been claimed by paying the KTON penalty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U16"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "darwinia_account_migration",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Migrated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountId20",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account has been migrated."
                      ]
                    },
                    {
                      "name": "NewMultisigParamsNoted",
                      "fields": [
                        {
                          "name": "from",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 42,
                          "typeName": "MultisigParams",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A new multisig account params was noted/recorded on-chain."
                      ]
                    },
                    {
                      "name": "MultisigMigrated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "detail",
                          "type": 44,
                          "typeName": "MultisigMigrationDetail",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig account has been migrated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 12,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "darwinia_account_migration",
                "MultisigParams"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 0,
                      "typeName": "AccountId20",
                      "docs": [

                      ]
                    },
                    {
                      "name": "members",
                      "type": 43,
                      "typeName": "Vec<AccountId20>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 39,
                      "typeName": "u16",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "darwinia_account_migration",
                "MultisigMigrationDetail"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "AccountId20",
                      "docs": [

                      ]
                    },
                    {
                      "name": "members",
                      "type": 45,
                      "typeName": "Vec<(AccountId32, bool)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 39,
                      "typeName": "u16",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 46
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  41,
                  36
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "fields": [
                        {
                          "name": "staker",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposits",
                          "type": 48,
                          "typeName": "Vec<DepositId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account has staked."
                      ]
                    },
                    {
                      "name": "Unstaked",
                      "fields": [
                        {
                          "name": "staker",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposits",
                          "type": 48,
                          "typeName": "Vec<DepositId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account has unstaked."
                      ]
                    },
                    {
                      "name": "Payout",
                      "fields": [
                        {
                          "name": "staker",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A payout has been made for the staker."
                      ]
                    },
                    {
                      "name": "Elected",
                      "fields": [
                        {
                          "name": "collators",
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new collator set has been elected."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 39
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollectingAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authorities changed. Collecting authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "operation",
                          "type": 51,
                          "typeName": "Operation<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 52,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 53,
                          "typeName": "Vec<(T::AccountId, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Collected enough authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectingNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "New message root found. Collecting new message root signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "commitment",
                          "type": 57,
                          "typeName": "Commitment",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 53,
                          "typeName": "Vec<(T::AccountId, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Collected enough new message root signatures."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Operation"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddMember",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RemoveMember",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SwapMembers",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "A",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 54
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  55
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 56,
                      "typeName": "[u8; 65]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Commitment"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message_root",
                      "type": 11,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 59,
                          "typeName": "VoteThreshold",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "vote",
                          "type": 60,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An account has secconded a proposal"
                      ]
                    },
                    {
                      "name": "ProposalCanceled",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal got canceled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SimpleMajority",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 61,
                          "typeName": "Vote",
                          "docs": [

                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voted",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 64
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [

                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voted",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 67,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone has renounced their candidacy."
                      ]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A seat holder was slashed by amount by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 68
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    },
                    {
                      "name": "UpdatedInactive",
                      "fields": [
                        {
                          "name": "reactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The inactive funds of the pallet have been updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new tip suggestion has been opened."
                      ]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A tip suggestion has reached threshold and is closing."
                      ]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A tip suggestion has been closed."
                      ]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A tip suggestion has been retracted."
                      ]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A tip suggestion has been slashed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 77,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 31,
                          "typeName": "Option<TaskName>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallUnavailable",
                      "fields": [
                        {
                          "name": "task",
                          "type": 77,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 31,
                          "typeName": "Option<TaskName>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    },
                    {
                      "name": "PeriodicFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 77,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 31,
                          "typeName": "Option<TaskName>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The given task was unable to be renewed since the agenda is full at that block."
                      ]
                    },
                    {
                      "name": "PermanentlyOverweight",
                      "fields": [
                        {
                          "name": "task",
                          "type": 77,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 31,
                          "typeName": "Option<TaskName>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The given task can never be executed since it is overweight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "PureCreated",
                      "fields": [
                        {
                          "name": "pure",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A pure account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 11,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "crab_runtime",
                "pallets",
                "proxy",
                "ProxyType"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Governance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "IdentityJudgement",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CancelProxy",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaBridge",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SubstrateBridge",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some XCM was executed ok."
                      ]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "error",
                          "type": 82,
                          "typeName": "XcmError",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some XCM failed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM version used."
                      ]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bad XCM format used."
                      ]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 31,
                          "typeName": "Option<XcmHash>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 83,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sent_at",
                          "type": 4,
                          "typeName": "RelayBlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "required",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unimplemented",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LocationFull",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LocationNotInvertible",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidLocation",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AssetNotFound",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotWithdrawable",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LocationCannotHold",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DestinationUnsupported",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transport",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unroutable",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnknownClaim",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FailedToDecode",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotHoldingFees",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TooExpensive",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectationFalse",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PalletNotFound",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NameMismatch",
                      "fields": [

                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "VersionIncompatible",
                      "fields": [

                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HoldingWouldOverflow",
                      "fields": [

                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExportError",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReanchorFailed",
                      "fields": [

                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoDeal",
                      "fields": [

                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "fields": [

                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LockError",
                      "fields": [

                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unanchored",
                      "fields": [

                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotDepositable",
                      "fields": [

                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "fields": [

                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Barrier",
                      "fields": [

                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WeightNotComputable",
                      "fields": [

                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExceedsStackLimit",
                      "fields": [

                      ],
                      "index": 39,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "xcm::latest::Outcome",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 106,
                          "typeName": "Response",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 121,
                          "typeName": "VersionedMultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "The cost of sending it (borne by the chain) is included.",
                        "",
                        "\\[ destination, result, cost \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "XcmError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 135,
                          "typeName": "VersionedMultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerierVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Expected query response has been received but the expected querier location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerier",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Expected query response has been received but the querier location of the response does",
                        "not match the expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected querier, maybe actual querier \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyStarted",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A remote has requested XCM version change notification from us and we have honored it.",
                        "A version information message is sent to them and its cost is included.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyRequested",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "We have requested that a remote chain sends us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyUnrequested",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "We have requested that a remote chain stops sending us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "FeesPaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Fees were paid from a location for an operation (often for using `SendXcm`).",
                        "",
                        "\\[ paying location, fees \\]"
                      ]
                    },
                    {
                      "name": "AssetsClaimed",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 121,
                          "typeName": "VersionedMultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some assets have been claimed from an asset trap",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Outcome"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "Error",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "Error",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multilocation",
                "MultiLocation"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "interior",
                      "type": 87,
                      "typeName": "Junctions",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 90,
                          "typeName": "Option<NetworkId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 90,
                          "typeName": "Option<NetworkId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 90,
                          "typeName": "Option<NetworkId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key",
                          "type": 1,
                          "typeName": "[u8; 20]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": "data",
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 93,
                          "typeName": "BodyId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "part",
                          "type": 94,
                          "typeName": "BodyPart",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 91
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "block_hash",
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Polkadot",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kusama",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Westend",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Rococo",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Wococo",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BitcoinCore",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BitcoinCash",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Moniker",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "[u8; 4]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Executive",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Technical",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Legislative",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Judicial",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Defense",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Administration",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 96,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 97
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response",
                          "type": 106,
                          "typeName": "Response",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "querier",
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 114,
                          "typeName": "OriginKind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 115,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_message_size",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_capacity",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "want",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maximal",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserve",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Xcm<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Xcm<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearError",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ticket",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "Option<(u32, Error)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "MaybeErrorCode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response_info",
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "crate_major",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearTransactStatus",
                      "fields": [

                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 91,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination",
                          "type": 87,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "unlocker",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "locker",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearTopic",
                      "fields": [

                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        },
                        {
                          "name": "check_origin",
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 99,
                      "typeName": "Vec<MultiAsset>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 99,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 100
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 101,
                      "typeName": "AssetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fun",
                      "type": 102,
                      "typeName": "Fungibility",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 103,
                          "typeName": "AssetInstance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "[u8; 4]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": "[u8; 8]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "[u8; 16]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Response"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "Option<(u32, Error)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "name": null,
                          "type": 109,
                          "typeName": "VecPalletInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "MaybeErrorCode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 108
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 108,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 108,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  82
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v3",
                "VecPalletInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 110,
                      "typeName": "Vec<PalletInfo>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 111
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "xcm",
                "v3",
                "PalletInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 89,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "module_name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "major",
                      "type": 89,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "minor",
                      "type": 89,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "patch",
                      "type": 89,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TruncatedError",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 86
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v2",
                "OriginKind"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SovereignAccount",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Superuser",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Xcm",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 86,
                      "typeName": "MultiLocation",
                      "docs": [

                      ]
                    },
                    {
                      "name": "query_id",
                      "type": 9,
                      "typeName": "QueryId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "name": null,
                          "type": 118,
                          "typeName": "WildMultiAsset",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 101,
                          "typeName": "AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fun",
                          "type": 119,
                          "typeName": "WildFungibility",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 101,
                          "typeName": "AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fun",
                          "type": 119,
                          "typeName": "WildFungibility",
                          "docs": [

                          ]
                        },
                        {
                          "name": "count",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonFungible",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "xcm",
                "v3",
                "WeightLimit"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "v2::MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "v3::MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 123,
                      "typeName": "Vec<MultiAsset>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 123,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 124
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 125,
                      "typeName": "AssetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fun",
                      "type": 133,
                      "typeName": "Fungibility",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "interior",
                      "type": 127,
                      "typeName": "Junctions",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 129,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "id",
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 129,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 129,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key",
                          "type": 1,
                          "typeName": "[u8; 20]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 130,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 131,
                          "typeName": "BodyId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "part",
                          "type": 132,
                          "typeName": "BodyPart",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "xcm",
                "v2",
                "NetworkId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 130,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Polkadot",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kusama",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 130,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Executive",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Technical",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Legislative",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Judicial",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Defense",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Administration",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyPart"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "denom",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 134,
                          "typeName": "AssetInstance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "u128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "[u8; 4]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": "[u8; 8]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": "[u8; 16]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": "v2::MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "v3::MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Outcome",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM."
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM."
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "outcome",
                          "type": 85,
                          "typeName": "Outcome",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome."
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "remaining_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "overweight_index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "overweight_index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed."
                      ]
                    },
                    {
                      "name": "MaxMessagesExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 12,
                          "typeName": "MessageId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The maximum number of downward messages was."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "transaction_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "exit_reason",
                          "type": 140,
                          "typeName": "ExitReason",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 20]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "ExitSucceed",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 142,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 146,
                          "typeName": "ExitRevert",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "ExitFatal",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Returned",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Suicided",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [
                        {
                          "name": null,
                          "type": 143,
                          "typeName": "Opcode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "evm_core",
                "opcode",
                "Opcode"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 145
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 145,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "Str"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 142,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 149,
                          "typeName": "Log",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given address."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 139,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 150,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 150,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 11
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "pallet_bridge_parachains",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UntrackedParachainRejected",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The caller has provided head of parachain that the pallet is not configured to track."
                      ]
                    },
                    {
                      "name": "MissingParachainHead",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The caller has declared that he has provided given parachain head, but it is missing",
                        "from the storage proof."
                      ]
                    },
                    {
                      "name": "IncorrectParachainHeadHash",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_head_hash",
                          "type": 11,
                          "typeName": "ParaHash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "actual_parachain_head_hash",
                          "type": 11,
                          "typeName": "ParaHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The caller has provided parachain head hash that is not matching the hash read from the",
                        "storage proof."
                      ]
                    },
                    {
                      "name": "RejectedObsoleteParachainHead",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_head_hash",
                          "type": 11,
                          "typeName": "ParaHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The caller has provided obsolete parachain head, which is already known to the pallet."
                      ]
                    },
                    {
                      "name": "RejectedLargeParachainHead",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_head_hash",
                          "type": 11,
                          "typeName": "ParaHash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_head_size",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The caller has provided parachain head that exceeds the maximal configured head size."
                      ]
                    },
                    {
                      "name": "UpdatedParachainHead",
                      "fields": [
                        {
                          "name": "parachain",
                          "type": 152,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_head_hash",
                          "type": 11,
                          "typeName": "ParaHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Parachain head has been updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "bp_polkadot_core",
                "parachains",
                "ParaId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParameterUpdated",
                      "fields": [
                        {
                          "name": "parameter",
                          "type": 64,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Pallet parameter has been updated."
                      ]
                    },
                    {
                      "name": "MessageAccepted",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 17,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 10,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been accepted and is waiting to be delivered."
                      ]
                    },
                    {
                      "name": "MessagesReceived",
                      "fields": [
                        {
                          "name": null,
                          "type": 154,
                          "typeName": "Vec<ReceivedMessages<ReceivalResult>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Messages have been received from the bridged chain."
                      ]
                    },
                    {
                      "name": "MessagesDelivered",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 17,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "messages",
                          "type": 161,
                          "typeName": "DeliveredMessages",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Messages in the inclusive range have been delivered to the bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 155
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "bp_messages",
                "ReceivedMessages"
              ],
              "params": [
                {
                  "name": "Result",
                  "type": 156
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "receive_results",
                      "type": 158,
                      "typeName": "Vec<(MessageNonce, Result)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "skipped_for_not_enough_weight",
                      "type": 160,
                      "typeName": "Vec<MessageNonce>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "bp_messages",
                "ReceivalResult"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 157,
                          "typeName": "MessageDispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TooManyUnrewardedRelayers",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TooManyUnconfirmedMessages",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PreDispatchValidateFailed",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "bp_runtime",
                "messages",
                "MessageDispatchResult"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dispatch_result",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unspent_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_fee_paid_during_dispatch",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 158,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 159
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  10,
                  156
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 160,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "bp_messages",
                "DeliveredMessages"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_results",
                      "type": 162,
                      "typeName": "DispatchResultsBitVec",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "bitSequence": {
                  "bitStoreType": 2,
                  "bitOrderType": 163
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "bitvec",
                "order",
                "Msb0"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_bridge_dispatch",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MessageRejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message has been rejected before reaching dispatch."
                      ]
                    },
                    {
                      "name": "MessageVersionSpecMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been rejected by dispatcher because of spec version mismatch.",
                        "Last two arguments are: expected and passed spec version."
                      ]
                    },
                    {
                      "name": "MessageWeightMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message has been rejected by dispatcher because of weight mismatch.",
                        "Last two arguments are: expected and passed call weight."
                      ]
                    },
                    {
                      "name": "MessageSignatureMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Message signature mismatch."
                      ]
                    },
                    {
                      "name": "MessageCallDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "We have failed to decode Call from the message."
                      ]
                    },
                    {
                      "name": "MessageCallValidateFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 166,
                          "typeName": "TransactionValidityError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The call from the message has been rejected by the call validator."
                      ]
                    },
                    {
                      "name": "MessageDispatchPaymentFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The origin account has failed to pay fee for dispatching the message."
                      ]
                    },
                    {
                      "name": "MessageDispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 63,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Message has been dispatched with given result."
                      ]
                    },
                    {
                      "name": "_Dummy",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Phantom member, never used. Needed to handle multiple pallet instances."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  17,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "name": null,
                          "type": 167,
                          "typeName": "InvalidTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "UnknownTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Payment",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Future",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Stale",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AncientBirthBlock",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExhaustsResources",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadMandatory",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MandatoryValidation",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadSigner",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Enroll",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Relayer enrollment. \\[account_id, locked_collateral, relay_fee\\]"
                      ]
                    },
                    {
                      "name": "UpdateLockedCollateral",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update relayer locked collateral. \\[account_id, new_collateral\\]"
                      ]
                    },
                    {
                      "name": "UpdateRelayFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update relayer fee. \\[account_id, new_fee\\]"
                      ]
                    },
                    {
                      "name": "CancelEnrollment",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Relayer cancel enrollment. \\[account_id\\]"
                      ]
                    },
                    {
                      "name": "UpdateCollateralSlashProtect",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update collateral slash protect value. \\[slash_protect_value\\]"
                      ]
                    },
                    {
                      "name": "UpdateAssignedRelayersNumber",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Update market assigned relayers numbers. \\[new_assigned_relayers_number\\]"
                      ]
                    },
                    {
                      "name": "FeeMarketSlash",
                      "fields": [
                        {
                          "name": null,
                          "type": 170,
                          "typeName": "SlashReport<T::AccountId, T::BlockNumber, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Slash report"
                      ]
                    },
                    {
                      "name": "OrderCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 52,
                          "typeName": "Option<T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Create new order. \\[lane_id, message_nonce, order_fee, assigned_relayers,",
                        "out_of_slots_time\\]"
                      ]
                    },
                    {
                      "name": "OrderReward",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 171,
                          "typeName": "RewardItem<T::AccountId, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Reward distribute of the order. \\[lane_id, message_nonce, rewards\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "SlashReport"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 52,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay_time",
                      "type": 52,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_fee_market",
                "s2s",
                "payment",
                "RewardItem"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "to_assigned_relayers",
                      "type": 172,
                      "typeName": "BTreeMap<AccountId, Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_treasury",
                      "type": 173,
                      "typeName": "Option<Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_message_relayer",
                      "type": 174,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_confirm_relayer",
                      "type": 174,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 67,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 68
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Finalization",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Initialization",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 77
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 89,
                      "typeName": "codec::Compact<u32>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_name",
                      "type": 145,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 179,
                          "typeName": "Vec<KeyValue>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 181,
                          "typeName": "Vec<Key>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 13,
                          "typeName": "Key",
                          "docs": [

                          ]
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 179,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 180
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 180,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  13,
                  13
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 181,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "per_class",
                      "type": 183,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 184
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 184,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 184,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 184,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 185,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_total",
                      "type": 185,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 185,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 187,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "write",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 145,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_name",
                      "type": 145,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "apis",
                      "type": 190,
                      "typeName": "ApisVec",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 191
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 191,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 192
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  104,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 195,
                      "typeName": "HeadData",
                      "docs": [

                      ]
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 11,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 197
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 197,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "UpgradeRestriction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 199,
                      "typeName": "BTreeSet<Vec<u8>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 181,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 11,
                      "typeName": "relay_chain::Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 77,
                      "typeName": "(u32, u32)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ingress_channels",
                      "type": 201,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "egress_channels",
                      "type": 201,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 201,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 202
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  203
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHrmpChannel"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mqc_head",
                      "type": 204,
                      "typeName": "Option<Hash>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHostConfiguration"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 11,
                      "typeName": "RelayHash",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 83
                },
                {
                  "name": "V",
                  "type": 206
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 208,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 208,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 209
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 209,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  206
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 210,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 211
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 83
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 83,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 213,
                          "typeName": "ParachainInherentData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 13,
                          "typeName": "UpwardMessage",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 194,
                      "typeName": "PersistedValidationData",
                      "docs": [

                      ]
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 198,
                      "typeName": "sp_trie::StorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "downward_messages",
                      "type": 214,
                      "typeName": "Vec<InboundDownwardMessage>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 216,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 215
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "msg",
                      "type": 13,
                      "typeName": "DownwardMessage",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 83
                },
                {
                  "name": "V",
                  "type": 217
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 219,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 217,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 218
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 219,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 220
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  217
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 9,
                          "typeName": "T::Moment",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "parachain_info",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 225
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 227,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 104,
                      "typeName": "LockIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reasons",
                      "type": 226,
                      "typeName": "Reasons",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Misc",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "All",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 227,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 225
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 229
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 230,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 104
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 104,
                      "typeName": "ReserveIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 230,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_free",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_reserved",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "keep_alive",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u128",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "min_balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_sufficient",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "accounts",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "approvals",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "status",
                      "type": 236,
                      "typeName": "AssetStatus",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetStatus"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Destroying",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  10,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "Extra",
                  "type": 64
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_frozen",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reason",
                      "type": 239,
                      "typeName": "ExistenceReason<DepositBalance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra",
                      "type": 64,
                      "typeName": "Extra",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sufficient",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositRefunded",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 240,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  10,
                  0,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 243
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "name",
                      "type": 243,
                      "typeName": "BoundedString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "symbol",
                      "type": 243,
                      "typeName": "BoundedString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_frozen",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_sufficient",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_balance",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "start_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Start the process of destroying a fungible asset class.",
                        "",
                        "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                        "destruction of an asset class.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "The asset class must be frozen before calling `start_destroy`."
                      ]
                    },
                    {
                      "name": "destroy_accounts",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Destroy all accounts associated with a given asset.",
                        "",
                        "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedAccounts` event."
                      ]
                    },
                    {
                      "name": "destroy_approvals",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                        "",
                        "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedApprovals` event."
                      ]
                    },
                    {
                      "name": "finish_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Complete destroying asset and unreserve currency.",
                        "",
                        "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                        "hand.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each successful call emits the `Event::Destroyed` event."
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "symbol",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "symbol",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_balance",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_sufficient",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_frozen",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 9,
                          "typeName": "T::AssetIdParameter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "allow_burn",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    },
                    {
                      "name": "LiveAsset",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "The asset is a live asset and is actively being used. Usually emit for operations such",
                        "as `start_destroy` which require the asset to be in a destroying state."
                      ]
                    },
                    {
                      "name": "AssetNotLive",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "The asset is not live, and likely being destroyed."
                      ]
                    },
                    {
                      "name": "IncorrectStatus",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "The asset status is not the expected status."
                      ]
                    },
                    {
                      "name": "NotFrozen",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "The asset should be frozen before the given operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 247
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 248,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 247
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V1",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule",
                          "type": 247,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule",
                          "type": 247,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 253
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 254,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "darwinia_deposit",
                "Deposit"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 39,
                      "typeName": "DepositId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "start_time",
                      "type": 6,
                      "typeName": "Moment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "expired_time",
                      "type": 6,
                      "typeName": "Moment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "in_use",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 254,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 253
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "darwinia_deposit",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "lock",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "months",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Lock the RING for some KTON profit/interest."
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Claim the expired-locked RING."
                      ]
                    },
                    {
                      "name": "claim_with_penalty",
                      "fields": [
                        {
                          "name": "id",
                          "type": 39,
                          "typeName": "DepositId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Claim the unexpired-locked RING by paying the KTON penalty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "darwinia_deposit",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LockAtLeastSome",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Lock at least for a specific amount."
                      ]
                    },
                    {
                      "name": "LockAtLeastOneMonth",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Lock at least for one month."
                      ]
                    },
                    {
                      "name": "LockAtMostThirtySixMonths",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Lock at most for thirty-six months."
                      ]
                    },
                    {
                      "name": "ExceedMaxDeposits",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Exceed maximum deposit count."
                      ]
                    },
                    {
                      "name": "DepositNotFound",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Deposit not found."
                      ]
                    },
                    {
                      "name": "DepositInUse",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Deposit is in use."
                      ]
                    },
                    {
                      "name": "DepositNotInUse",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Deposit is not in use."
                      ]
                    },
                    {
                      "name": "DepositAlreadyExpired",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Deposit is already expired."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "darwinia_account_migration",
                "AssetAccount"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_frozen",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reason",
                      "type": 258,
                      "typeName": "ExistenceReason",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra",
                      "type": 64,
                      "typeName": "()",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "darwinia_account_migration",
                "ExistenceReason"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sufficient",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositRefunded",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 260,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "info",
                      "type": 264,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 261
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 263,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  262
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reasonable",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KnownGood",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfDate",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LowQuality",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Erroneous",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 261
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 265,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "display",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "legal",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "web",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "riot",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "email",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 297,
                      "typeName": "Option<[u8; 20]>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "image",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "twitter",
                      "type": 267,
                      "typeName": "Data",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 266
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 296,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 266,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  267,
                  267
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 268,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 269,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 271,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 17,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 272,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 273,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 274,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 276,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 277,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 278,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 279,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 280,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 281,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 282,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 283,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 284,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 285,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 286,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 287,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 288,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 289,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 290,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 291,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 292,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 293,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 294,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 295,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 268,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 269,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 270,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 272,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 273,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 274,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 275,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 276,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 278,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 280,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 281,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 283,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 284,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 285,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 287,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 289,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 291,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 292,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 293,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 295,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 266
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "darwinia_staking",
                "Ledger"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "staked_ring",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "staked_kton",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "staked_deposits",
                      "type": 299,
                      "typeName": "BoundedVec<DepositId<T>,<T as Config>::MaxDeposits>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unstaking_ring",
                      "type": 300,
                      "typeName": "BoundedVec<(Balance, T::BlockNumber), T::MaxUnstakings>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unstaking_kton",
                      "type": 300,
                      "typeName": "BoundedVec<(Balance, T::BlockNumber), T::MaxUnstakings>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unstaking_deposits",
                      "type": 303,
                      "typeName": "BoundedVec<(DepositId<T>, T::BlockNumber), T::MaxUnstakings>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 39
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 48,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 301
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 302,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 301
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 304
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 305,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  39,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 305,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 304
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "darwinia_account_migration",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "migrate",
                      "fields": [
                        {
                          "name": "from",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountId20",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 307,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Migrate all the account data under the `from` to `to`."
                      ]
                    },
                    {
                      "name": "migrate_multisig",
                      "fields": [
                        {
                          "name": "submitter",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "others",
                          "type": 308,
                          "typeName": "Vec<AccountId32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountId20",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 307,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_multisig_params",
                          "type": 309,
                          "typeName": "Option<MultisigParams>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Similar to `migrate` but for multisig accounts.",
                        "",
                        "The `_signature` should be provided by `who`."
                      ]
                    },
                    {
                      "name": "complete_multisig_migration",
                      "fields": [
                        {
                          "name": "multisig",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "submitter",
                          "type": 41,
                          "typeName": "AccountId32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 307,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "To complete the pending multisig migration.",
                        "",
                        "The `_signature` should be provided by `submitter`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 307,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 41
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 42,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "darwinia_account_migration",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExceedMaxVestings",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Exceed maximum vesting count."
                      ]
                    },
                    {
                      "name": "ExceedMaxDeposits",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Exceed maximum deposit count."
                      ]
                    },
                    {
                      "name": "AccountAlreadyExisted",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The migration destination was already taken by someone."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "darwinia_staking",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nominators",
                      "type": 313,
                      "typeName": "Vec<IndividualExposure<AccountId>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 313,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 314
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "darwinia_staking",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 315,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  316
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 317,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 317,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 318
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 318,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "stake",
                      "fields": [
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposits",
                          "type": 48,
                          "typeName": "Vec<DepositId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add stakes to the staking pool.",
                        "",
                        "This will transfer the stakes to a pallet/contact account."
                      ]
                    },
                    {
                      "name": "unstake",
                      "fields": [
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposits",
                          "type": 48,
                          "typeName": "Vec<DepositId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw stakes from the staking pool."
                      ]
                    },
                    {
                      "name": "restake",
                      "fields": [
                        {
                          "name": "ring_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposits",
                          "type": 48,
                          "typeName": "Vec<DepositId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Cancel the `unstake` operation.",
                        "",
                        "Re-stake the unstaking assets immediately."
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Claim the stakes from the pallet/contract account."
                      ]
                    },
                    {
                      "name": "collect",
                      "fields": [
                        {
                          "name": "commission",
                          "type": 311,
                          "typeName": "Perbill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Declare the desire to collect.",
                        "",
                        "Effects will be felt at the beginning of the next session."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Declare the desire to nominate a collator.",
                        "",
                        "Effects will be felt at the beginning of the next session."
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Declare no desire to either collect or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "If the target is a collator, its nominators need to re-nominate."
                      ]
                    },
                    {
                      "name": "set_collator_count",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Set collator count.",
                        "",
                        "This will apply to the incoming session.",
                        "",
                        "Require root origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExceedMaxDeposits",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Exceed maximum deposit count."
                      ]
                    },
                    {
                      "name": "ExceedMaxUnstakings",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Exceed maximum unstaking/unbonding count."
                      ]
                    },
                    {
                      "name": "DepositNotFound",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Deposit not found."
                      ]
                    },
                    {
                      "name": "NotStaker",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "You are not a staker."
                      ]
                    },
                    {
                      "name": "TargetNotCollator",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Target is not a collator."
                      ]
                    },
                    {
                      "name": "ZeroCollatorCount",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Collator count mustn't be zero."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 321,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 322
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 322,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  323
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "crab_runtime",
                "pallets",
                "session",
                "SessionKeys"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 324,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 325,
                      "typeName": "sr25519::Public",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 12,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 327,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  328,
                  13
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 17,
                      "typeName": "[u8; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 323,
                          "typeName": "T::Keys",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 324
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 332,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 332,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 324
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "darwinia_message_gadget",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_commitment_contract",
                      "fields": [
                        {
                          "name": "commitment_contract",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "AuthoritiesChangeSigned"
              ],
              "params": [
                {
                  "name": "MaxAuthorities",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "operation",
                      "type": 51,
                      "typeName": "Operation<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 52,
                      "typeName": "Option<u32>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 11,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signatures",
                      "type": 337,
                      "typeName": "BoundedVec<(AccountId, Signature), MaxAuthorities>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 54
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "MessageRootSigned"
              ],
              "params": [
                {
                  "name": "MaxAuthorities",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "commitment",
                      "type": 57,
                      "typeName": "Commitment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 11,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signatures",
                      "type": 337,
                      "typeName": "BoundedVec<(AccountId, Signature), MaxAuthorities>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authorized",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_authority",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing.",
                        "This will insert new authority into the index 0 of authorities."
                      ]
                    },
                    {
                      "name": "remove_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "swap_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap the old authority with the new authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "submit_authorities_change_signature",
                      "fields": [
                        {
                          "name": "signature",
                          "type": 55,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit the authorities change signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    },
                    {
                      "name": "submit_new_message_root_signature",
                      "fields": [
                        {
                          "name": "signature",
                          "type": 55,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Submit the new message root signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuthorityExisted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The authority is already existed."
                      ]
                    },
                    {
                      "name": "TooManyAuthorities",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Too many authorities."
                      ]
                    },
                    {
                      "name": "NotAuthority",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This is not an authority."
                      ]
                    },
                    {
                      "name": "AtLeastOneAuthority",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Require at least one authority. Not allow to decrease below one."
                      ]
                    },
                    {
                      "name": "OnAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Currently, the authorities is changing."
                      ]
                    },
                    {
                      "name": "NoAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Didn't find any authorities changes to sign."
                      ]
                    },
                    {
                      "name": "NoNewMessageRoot",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Didn't find any new message root to sign."
                      ]
                    },
                    {
                      "name": "BadSignature",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Failed to verify the signature."
                      ]
                    },
                    {
                      "name": "AlreadySubmitted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "This authority had already finished his duty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 342
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 454,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 342,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  343,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "preimages",
                "Bounded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 344
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Inline",
                      "fields": [
                        {
                          "name": null,
                          "type": 453,
                          "typeName": "BoundedInline",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Lookup",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "crab_runtime",
                "RuntimeCall"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 178,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 212,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 222,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ParachainInfo",
                      "fields": [
                        {
                          "name": null,
                          "type": 223,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 231,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 244,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 250,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 255,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Deposit, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccountMigration",
                      "fields": [
                        {
                          "name": null,
                          "type": 306,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AccountMigration, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DarwiniaStaking",
                      "fields": [
                        {
                          "name": null,
                          "type": 319,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DarwiniaStaking, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 329,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MessageGadget",
                      "fields": [
                        {
                          "name": null,
                          "type": 334,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageGadget, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 339,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EcdsaAuthority, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 345,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 350,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 351,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 353,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 354,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 355,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 356,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 357,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 368,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 373,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 375,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 376,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 378,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 379,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 400,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 401,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 402,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 414,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MessageTransact",
                      "fields": [
                        {
                          "name": null,
                          "type": 418,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageTransact, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePolkadotGrandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 419,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgePolkadotGrandpa, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgePolkadotParachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 436,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgePolkadotParachain, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeDarwiniaMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 441,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgeDarwiniaMessages, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeDarwiniaDispatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 451,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgeDarwiniaDispatch, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DarwiniaFeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 452,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DarwiniaFeeMarket, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 343,
                          "typeName": "BoundedCallOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`."
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 89,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 89,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "vote",
                          "type": 60,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 343,
                          "typeName": "BoundedCallOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal."
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 343,
                          "typeName": "BoundedCallOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 343,
                          "typeName": "BoundedCallOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "\tMust be always greater than zero.",
                        "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 89,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "conviction",
                          "type": 346,
                          "typeName": "Conviction",
                          "docs": [

                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 52,
                          "typeName": "Option<ReferendumIndex>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 89,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked1x",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked2x",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked3x",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked4x",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked5x",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked6x",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prime",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 344,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 89,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 344,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approve",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_old_weight",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 348,
                          "typeName": "OldWeight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 349
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "sp_weights",
                "OldWeight"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prime",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 344,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 89,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 344,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approve",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_old_weight",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 348,
                          "typeName": "OldWeight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 352,
                          "typeName": "Renouncing",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "slash_bond",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rerun_election",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
                        "started, else, nothing happens.",
                        "",
                        "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
                        "it is returned.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Renouncing"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RunnerUp",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 43,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 92,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 92,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 89,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "# <weight>",
                        "- Complexity: O(A) where `A` is the number of approvals",
                        "- Db reads and writes: `Approvals`",
                        "# </weight>",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip_value",
                          "type": 92,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip_value",
                          "type": 92,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 358,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 358,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 359,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 358,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 358,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 344
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "crab_runtime",
                "OriginCaller"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 360,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 361,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 362,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 363,
                          "typeName": "pallet_xcm::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 364,
                          "typeName": "cumulus_pallet_xcm::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 365,
                          "typeName": "pallet_ethereum::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MessageTransact",
                      "fields": [
                        {
                          "name": null,
                          "type": 366,
                          "typeName": "darwinia_message_transact::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 367,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "_Phantom",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "_Phantom",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "ParaId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "darwinia_message_transact",
                "LcmpEthOrigin"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MessageTransact",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 264,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 369,
                          "typeName": "Vec<(T::AccountId, Data)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 89,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee",
                          "type": 92,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee",
                          "type": 92,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fields",
                          "type": 371,
                          "typeName": "IdentityFields",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 89,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "judgement",
                          "type": 262,
                          "typeName": "Judgement<BalanceOf<T>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "identity",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "data",
                          "type": 267,
                          "typeName": "Data",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "data",
                          "type": 267,
                          "typeName": "Data",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 369,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 370
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 370,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  267
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 372
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "IdentityField",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Legal",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Web",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Riot",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Email",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PgpFingerprint",
                      "fields": [

                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Image",
                      "fields": [

                      ],
                      "index": 64,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Twitter",
                      "fields": [

                      ],
                      "index": 128,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 374,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 12,
                          "typeName": "TaskName",
                          "docs": [

                          ]
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 374,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 12,
                          "typeName": "TaskName",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 374,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 12,
                          "typeName": "TaskName",
                          "docs": [

                          ]
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 374,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 77
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 77,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage.",
                        "",
                        "If `len` is provided, then it will be a much cheaper operation.",
                        "",
                        "- `hash`: The hash of the preimage to be removed from the store.",
                        "- `len`: The length of the preimage of `hash`."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 377,
                          "typeName": "Option<T::ProxyType>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero."
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `pure`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                      ]
                    },
                    {
                      "name": "create_pure",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit."
                      ]
                    },
                    {
                      "name": "kill_pure",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 80,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "height",
                          "type": 89,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ext_index",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned pure proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`pure` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `pure` to create this account.",
                        "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `pure`.",
                        "- `height`: The height of the chain when the call to `pure` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created pure",
                        "account whose `pure` call has corresponding parameters."
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 11,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 11,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 11,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made."
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 377,
                          "typeName": "Option<T::ProxyType>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 344,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 80
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 80,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Services a single overweight XCM.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight XCM to service",
                        "- `weight_limit`: The amount of weight that XCM execution may take.",
                        "",
                        "Errors:",
                        "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                        "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                        "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    },
                    {
                      "name": "suspend_xcm_execution",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                        "suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                        "messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                        "message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    },
                    {
                      "name": "update_threshold_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Overwrites the amount of remaining weight under which we stop processing messages.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.threshold_weight`"
                      ]
                    },
                    {
                      "name": "update_weight_restrict_decay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Overwrites the speed to which the available weight approaches the maximum weight.",
                        "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
                      ]
                    },
                    {
                      "name": "update_xcmp_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Overwrite the maximum amount of weight any individual message may consume.",
                        "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 380,
                          "typeName": "Box<VersionedXcm<()>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 392,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 86,
                          "typeName": "Box<MultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 52,
                          "typeName": "Option<XcmVersion>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 135,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 121,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 381,
                          "typeName": "v2::Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "v3::Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 382,
                      "typeName": "Vec<Instruction<RuntimeCall>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 383
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response",
                          "type": 384,
                          "typeName": "Response",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 115,
                          "typeName": "DoubleEncoded<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_message_size",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_capacity",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 127,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_assets",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_assets",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "receive",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserve",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 124,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 391,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 381,
                          "typeName": "Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 381,
                          "typeName": "Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearError",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ticket",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "name": null,
                          "type": 385,
                          "typeName": "Option<(u32, Error)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 386
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 386,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 386,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  387
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unimplemented",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MultiLocationFull",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidLocation",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AssetNotFound",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotWithdrawable",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LocationCannotHold",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DestinationUnsupported",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transport",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unroutable",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnknownClaim",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FailedToDecode",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotHoldingFees",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TooExpensive",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Barrier",
                      "fields": [

                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WeightNotComputable",
                      "fields": [

                      ],
                      "index": 25,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "name": null,
                          "type": 389,
                          "typeName": "WildMultiAsset",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 125,
                          "typeName": "AssetId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fun",
                          "type": 390,
                          "typeName": "WildFungibility",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonFungible",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 393,
                          "typeName": "v2::Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 397,
                          "typeName": "v3::Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 394,
                      "typeName": "Vec<Instruction<RuntimeCall>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 394,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 395
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response",
                          "type": 384,
                          "typeName": "Response",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 114,
                          "typeName": "OriginKind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 396,
                          "typeName": "DoubleEncoded<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_message_size",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_capacity",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 127,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_assets",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_assets",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "receive",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserve",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 381,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 388,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 124,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 391,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 393,
                          "typeName": "Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 393,
                          "typeName": "Xcm<RuntimeCall>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearError",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 122,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ticket",
                          "type": 126,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 398,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 398,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 399
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response",
                          "type": 106,
                          "typeName": "Response",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "querier",
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 114,
                          "typeName": "OriginKind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 396,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_message_size",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_capacity",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sender",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "want",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maximal",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserve",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        },
                        {
                          "name": "assets",
                          "type": 117,
                          "typeName": "MultiAssetFilter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 397,
                          "typeName": "Xcm<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 397,
                          "typeName": "Xcm<Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearError",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ticket",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 9,
                          "typeName": "QueryId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_response_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "MultiAssets",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "Option<(u32, Error)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "MaybeErrorCode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "response_info",
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "crate_major",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 89,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "QueryResponseInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearTransactStatus",
                      "fields": [

                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "Junction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 91,
                          "typeName": "NetworkId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination",
                          "type": 87,
                          "typeName": "InteriorMultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "xcm",
                          "type": 95,
                          "typeName": "Xcm<()>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "unlocker",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "owner",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 100,
                          "typeName": "MultiAsset",
                          "docs": [

                          ]
                        },
                        {
                          "name": "locker",
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "name": null,
                          "type": 12,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ClearTopic",
                      "fields": [

                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "MultiLocation",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 120,
                          "typeName": "WeightLimit",
                          "docs": [

                          ]
                        },
                        {
                          "name": "check_origin",
                          "type": 113,
                          "typeName": "Option<MultiLocation>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "OverweightIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 403,
                          "typeName": "Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 404,
                          "typeName": "LegacyTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 410,
                          "typeName": "EIP2930Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 413,
                          "typeName": "EIP1559Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 407,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 408,
                      "typeName": "TransactionSignature",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 406,
                      "typeName": "[u64; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 4,
                  "type": 10
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Create",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 409,
                      "typeName": "TransactionRecoveryId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 407,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 411,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 412
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 139,
                      "typeName": "Address",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_keys",
                      "type": 150,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 407,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 411,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "input",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 416,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 416,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 139,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "salt",
                          "type": 11,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 405,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 415,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 416,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 405
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 405,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 417
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  139,
                  150
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "darwinia_message_transact",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "message_transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 403,
                          "typeName": "Box<Transaction>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "This call can only be called by the lcmp message layer and is not available to normal",
                        "users."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_finality_proof",
                      "fields": [
                        {
                          "name": "finality_target",
                          "type": 420,
                          "typeName": "Box<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "justification",
                          "type": 422,
                          "typeName": "GrandpaJustification<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Verify a target header is finalized according to the given finality proof.",
                        "",
                        "It will use the underlying storage pallet to fetch information about the current",
                        "authorities and best finalized header in order to verify that the header is finalized.",
                        "",
                        "If successful in verification, it will write the target header to the underlying storage",
                        "pallet."
                      ]
                    },
                    {
                      "name": "initialize",
                      "fields": [
                        {
                          "name": "init_data",
                          "type": 432,
                          "typeName": "super::InitializationData<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Bootstrap the bridge pallet with an initial header and authority set from which to sync.",
                        "",
                        "The initial configuration provided does not need to be the genesis header of the bridged",
                        "chain, it can be any arbitrary header. You can also provide the next scheduled set",
                        "change if it is already know.",
                        "",
                        "This function is only allowed to be called from a trusted origin and writes to storage",
                        "with practically no checks in terms of the validity of the data. It is important that",
                        "you ensure that valid data is being passed in."
                      ]
                    },
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operating_mode",
                      "fields": [
                        {
                          "name": "operating_mode",
                          "type": 435,
                          "typeName": "BasicOperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Halt or resume all pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 421
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 89,
                      "typeName": "Number",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "digest",
                      "type": 14,
                      "typeName": "Digest",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "bp_header_chain",
                "justification",
                "GrandpaJustification"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 420
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "commit",
                      "type": 423,
                      "typeName": "finality_grandpa::Commit<Header::Hash, Header::Number,\nAuthoritySignature, AuthorityId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes_ancestries",
                      "type": 431,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "finality_grandpa",
                "Commit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 424
                },
                {
                  "name": "Id",
                  "type": 426
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 11,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "precommits",
                      "type": 428,
                      "typeName": "Vec<SignedPrecommit<H, N, S, Id>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 425,
                      "typeName": "ed25519::Signature",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 307,
                      "typeName": "[u8; 64]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 427,
                      "typeName": "ed25519::Public",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 12,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 429
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "finality_grandpa",
                "SignedPrecommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 424
                },
                {
                  "name": "Id",
                  "type": 426
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "precommit",
                      "type": 430,
                      "typeName": "Precommit<H, N>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 424,
                      "typeName": "S",
                      "docs": [

                      ]
                    },
                    {
                      "name": "id",
                      "type": 426,
                      "typeName": "Id",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 11,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 420
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "bp_header_chain",
                "InitializationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 420
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 420,
                      "typeName": "Box<H>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_list",
                      "type": 433,
                      "typeName": "AuthorityList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 10,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operating_mode",
                      "type": 435,
                      "typeName": "BasicOperatingMode",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 434
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  426,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "bp_runtime",
                "BasicOperatingMode"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "pallet_bridge_parachains",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_parachain_heads",
                      "fields": [
                        {
                          "name": "at_relay_block",
                          "type": 437,
                          "typeName": "(RelayBlockNumber, RelayBlockHash)",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachains",
                          "type": 438,
                          "typeName": "Vec<(ParaId, ParaHash)>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "parachain_heads_proof",
                          "type": 440,
                          "typeName": "ParaHeadsProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Submit proof of one or several parachain heads.",
                        "",
                        "The proof is supposed to be proof of some `Heads` entries from the",
                        "`polkadot-runtime-parachains::paras` pallet instance, deployed at the bridged chain.",
                        "The proof is supposed to be crafted at the `relay_header_hash` that must already be",
                        "imported by corresponding GRANDPA pallet at this chain."
                      ]
                    },
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operating_mode",
                      "fields": [
                        {
                          "name": "operating_mode",
                          "type": 435,
                          "typeName": "BasicOperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Halt or resume all pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  11
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 438,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 439
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 439,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  152,
                  11
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "bp_polkadot_core",
                "parachains",
                "ParaHeadsProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 181,
                      "typeName": "Vec<Vec<u8>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 73,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operating_mode",
                      "fields": [
                        {
                          "name": "operating_mode",
                          "type": 442,
                          "typeName": "MessagesOperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Halt or resume all/some pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "update_pallet_parameter",
                      "fields": [
                        {
                          "name": "parameter",
                          "type": 64,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update pallet parameter.",
                        "",
                        "May only be called either by root, or by `PalletOwner`.",
                        "",
                        "The weight is: single read for permissions check + 2 writes for parameter value and",
                        "event."
                      ]
                    },
                    {
                      "name": "send_message",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 17,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payload",
                          "type": 443,
                          "typeName": "T::OutboundPayload",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delivery_and_dispatch_fee",
                          "type": 6,
                          "typeName": "T::OutboundMessageFee",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Send message over lane."
                      ]
                    },
                    {
                      "name": "receive_messages_proof",
                      "fields": [
                        {
                          "name": "relayer_id_at_bridged_chain",
                          "type": 0,
                          "typeName": "T::InboundRelayer",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 448,
                          "typeName": "MessagesProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "messages_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dispatch_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Receive messages proof from bridged chain.",
                        "",
                        "The weight of the call assumes that the transaction always brings outbound lane",
                        "state update. Because of that, the submitter (relayer) has no benefit of not including",
                        "this data in the transaction, so reward confirmations lags should be minimal.",
                        "",
                        "Note: To maintain compatibility, the call index is 5 instead of 4 because the",
                        "call(increase_message_fee) with index 4 has been removed. https://github.com/darwinia-network/darwinia-messages-substrate/pull/207"
                      ]
                    },
                    {
                      "name": "receive_messages_delivery_proof",
                      "fields": [
                        {
                          "name": "proof",
                          "type": 449,
                          "typeName": "MessagesDeliveryProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relayers_state",
                          "type": 450,
                          "typeName": "UnrewardedRelayersState",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Receive messages delivery proof from bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "bp_messages",
                "MessagesOperatingMode"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Basic",
                      "fields": [
                        {
                          "name": null,
                          "type": 435,
                          "typeName": "BasicOperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RejectingOutboundMessages",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "bp_message_dispatch",
                "MessagePayload"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 444
                },
                {
                  "name": "TargetChainSignature",
                  "type": 445
                },
                {
                  "name": "Call",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "SpecVersion",
                      "docs": [

                      ]
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 446,
                      "typeName": "CallOrigin<SourceChainAccountId, TargetChainAccountPublic,\nTargetChainSignature>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_fee_payment",
                      "type": 447,
                      "typeName": "DispatchFeePayment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 13,
                      "typeName": "Call",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "account",
                "EthereumSigner"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 20]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "account",
                "EthereumSignature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 55,
                      "typeName": "ecdsa::Signature",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "bp_message_dispatch",
                "CallOrigin"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 444
                },
                {
                  "name": "TargetChainSignature",
                  "type": 445
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SourceRoot",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TargetAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 444,
                          "typeName": "TargetChainAccountPublic",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 445,
                          "typeName": "TargetChainSignature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SourceAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "bp_runtime",
                "messages",
                "DispatchFeePayment"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AtSourceChain",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AtTargetChain",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "target",
                "FromBridgedChainMessagesProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 11,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 181,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_start",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_end",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "source",
                "FromBridgedChainMessagesDeliveryProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 11,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 181,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayersState"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "unrewarded_relayer_entries",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages_in_oldest_entry",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_messages",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_delivered_nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "pallet_bridge_dispatch",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enroll_and_lock_collateral",
                      "fields": [
                        {
                          "name": "lock_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relay_fee",
                          "type": 173,
                          "typeName": "Option<BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Any accounts can enroll to be a relayer by lock collateral. The relay fee is optional,",
                        "the default value is MinimumRelayFee in runtime. (Update market needed)",
                        "Note: One account can enroll only once."
                      ]
                    },
                    {
                      "name": "increase_locked_collateral",
                      "fields": [
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Increase relayer's locked collateral"
                      ]
                    },
                    {
                      "name": "decrease_locked_collateral",
                      "fields": [
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Decrease relayer's locked collateral"
                      ]
                    },
                    {
                      "name": "update_relay_fee",
                      "fields": [
                        {
                          "name": "new_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Update relay fee for enrolled relayer. (Update market needed)"
                      ]
                    },
                    {
                      "name": "cancel_enrollment",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Cancel enrolled relayer(Update market needed)"
                      ]
                    },
                    {
                      "name": "set_slash_protect",
                      "fields": [
                        {
                          "name": "slash_protect",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_assigned_relayers_number",
                      "fields": [
                        {
                          "name": "number",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 342
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 455,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  456,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Proposal",
                  "type": 343
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "name": null,
                          "type": 458,
                          "typeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Proposal",
                  "type": 343
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proposal",
                      "type": 343,
                      "typeName": "Proposal",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 59,
                      "typeName": "VoteThreshold",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "tally",
                      "type": 459,
                      "typeName": "Tally<Balance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "MaxVotes",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 461,
                          "typeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegations",
                          "type": 464,
                          "typeName": "Delegations<Balance>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prior",
                          "type": 465,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "conviction",
                          "type": 346,
                          "typeName": "Conviction",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegations",
                          "type": 464,
                          "typeName": "Delegations<Balance>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prior",
                          "type": 465,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 462
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 463,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 462,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  60
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 463,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 462
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 466,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  343,
                  59
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 467,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  456
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooMany",
                      "fields": [

                      ],
                      "index": 21,
                      "docs": [
                        "Maximum number of items reached."
                      ]
                    },
                    {
                      "name": "VotingPeriodLow",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [
                        "Voting period too low"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 150,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ayes",
                      "type": 43,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nays",
                      "type": 43,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 473,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 474
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "SeatHolder"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Voter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 43,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Must vote for at least one candidate."
                      ]
                    },
                    {
                      "name": "TooManyVotes",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Cannot vote more than candidates."
                      ]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cannot vote more than maximum allowed."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Voter can not pay voting bond."
                      ]
                    },
                    {
                      "name": "MustBeVoter",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Must be a voter."
                      ]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Duplicated candidate submission."
                      ]
                    },
                    {
                      "name": "TooManyCandidates",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Too many candidates have been created."
                      ]
                    },
                    {
                      "name": "MemberSubmit",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Member cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Runner cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Candidate does not have enough funds."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 326,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 104,
                      "typeName": "[u8; 8]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "pallet_tips",
                "OpenTip"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 11,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "closes",
                      "type": 52,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "tips",
                      "type": 67,
                      "typeName": "Vec<(AccountId, Balance)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "finders_fee",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 485,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "AlreadyKnown",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The tip was already found/started."
                      ]
                    },
                    {
                      "name": "UnknownTip",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The tip hash is unknown."
                      ]
                    },
                    {
                      "name": "NotFinder",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The account attempting to retract the tip is not the finder of the tip."
                      ]
                    },
                    {
                      "name": "StillOpen",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The tip cannot be claimed/closed because there are not enough tippers yet."
                      ]
                    },
                    {
                      "name": "Premature",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The tip cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 489,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "info",
                      "type": 264,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 489,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 261
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 263,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 490,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  456
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 492
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 494,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 493
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 493,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fields",
                      "type": 371,
                      "typeName": "IdentityFields",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 494,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 492
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    },
                    {
                      "name": "JudgementForDifferentIdentity",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "The provided judgement was for a different identity."
                      ]
                    },
                    {
                      "name": "JudgementPaymentFailed",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "Error that occurs when there is an issue paying for judgement."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 497
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 499,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 497,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 498
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 498,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "pallet_scheduler",
                "Scheduled"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 12
                },
                {
                  "name": "Call",
                  "type": 343
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 359
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 31,
                      "typeName": "Option<Name>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 343,
                      "typeName": "Call",
                      "docs": [

                      ]
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 374,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 359,
                      "typeName": "PalletsOrigin",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 499,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 497
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    },
                    {
                      "name": "Named",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Attempt to use a non-named function on a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 68,
                          "typeName": "(AccountId, Balance)",
                          "docs": [

                          ]
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 174,
                          "typeName": "Option<(AccountId, Balance)>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "len",
                          "type": 52,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 502,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  11,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooBig",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 505,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  506,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 507
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 508,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 507,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 80
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proxy_type",
                      "type": 80,
                      "typeName": "ProxyType",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 508,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 507
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 509,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  510,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 511
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 512,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 11
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call_hash",
                      "type": 11,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 512,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 511
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 514,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 515
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundChannelDetails"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 83,
                      "typeName": "ParaId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state",
                      "type": 516,
                      "typeName": "InboundState",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message_metadata",
                      "type": 517,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundState"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 517,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 518
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 518,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  519
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "XcmpMessageFormat"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signals",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 520,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 521,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 522
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 83,
                      "typeName": "ParaId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state",
                      "type": 523,
                      "typeName": "OutboundState",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signals_exist",
                      "type": 36,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first_index",
                      "type": 39,
                      "typeName": "u16",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_index",
                      "type": 39,
                      "typeName": "u16",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 523,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 524,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  39
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 525,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 526,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  83,
                  4,
                  13
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Failed to send XCM message."
                      ]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Bad XCM origin."
                      ]
                    },
                    {
                      "name": "BadXcm",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM data."
                      ]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Bad overweight index."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 528,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 135,
                          "typeName": "VersionedMultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_match_querier",
                          "type": 529,
                          "typeName": "Option<VersionedMultiLocation>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_notify",
                          "type": 530,
                          "typeName": "Option<(u8, u8)>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 135,
                          "typeName": "VersionedMultiLocation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "is_active",
                          "type": 36,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 532,
                          "typeName": "VersionedResponse",
                          "docs": [

                          ]
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 529,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 135
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 135,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 530,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 531
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 531,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 531,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  2,
                  2
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 532,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 384,
                          "typeName": "v2::Response",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 106,
                          "typeName": "v3::Response",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 533,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  135
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 534,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  10,
                  8,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 536
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 537,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 536,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  135,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 537,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 536
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "name": null,
                          "type": 539,
                          "typeName": "Option<Vec<u8>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 13,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 540,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  0,
                  541
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 541,
            "type": {
              "path": [
                "xcm",
                "VersionedAssetId"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "name": null,
                          "type": 101,
                          "typeName": "v3::AssetId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "RemoteLockedFungibleRecord"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "u128",
                      "docs": [

                      ]
                    },
                    {
                      "name": "owner",
                      "type": 135,
                      "typeName": "VersionedMultiLocation",
                      "docs": [

                      ]
                    },
                    {
                      "name": "locker",
                      "type": 135,
                      "typeName": "VersionedMultiLocation",
                      "docs": [

                      ]
                    },
                    {
                      "name": "users",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 543,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 544
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 545,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 544,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  135
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 545,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 544
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Invalid asset for the operation."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "The owner does not own (all) of the asset that they wish to do the operation on."
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "The asset owner has too many locks on the asset."
                      ]
                    },
                    {
                      "name": "AccountNotSovereign",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "The given account is not an identifiable sovereign account for any location."
                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "The operation required fees to be paid which the initiator could not meet."
                      ]
                    },
                    {
                      "name": "LockNotFound",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "A remote lock with the corresponding data could not be found."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "The unlock operation cannot succeed because there are still users of the lock."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 547,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "ConfigData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 549,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "PageIndexData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": [

                      ]
                    },
                    {
                      "name": "overweight_count",
                      "type": 10,
                      "typeName": "OverweightIndex",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 550,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 551
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 551,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  13
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "OverLimit",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 553,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 554
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 554,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  403,
                  555,
                  560
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 555,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "from",
                      "type": 139,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to",
                      "type": 556,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "contract_address",
                      "type": 556,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 557,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 558,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 556,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 139
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 557,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 149
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 558,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 559,
                      "typeName": "[u8; BLOOM_SIZE]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 559,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 560,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 561,
                          "typeName": "EIP658ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 561,
                          "typeName": "EIP2930ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 561,
                          "typeName": "EIP1559ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 561,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "used_gas",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 558,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 557,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 562,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 403
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 563,
                      "typeName": "Header",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions",
                      "type": 565,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers",
                      "type": 566,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 563,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers_hash",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 139,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions_root",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "receipts_root",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 558,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "difficulty",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_used",
                      "type": 405,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "timestamp",
                      "type": 10,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra_data",
                      "type": 13,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mix_hash",
                      "type": 11,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 564,
                      "typeName": "H64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 564,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 104,
                      "typeName": "[u8; 8]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 565,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 403
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 566,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 563
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 567,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 560
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 568,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 555
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 569,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 570,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  139,
                  11
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 571,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Gas limit is too low."
                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Gas limit is too high."
                      ]
                    },
                    {
                      "name": "Undefined",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Undefined error."
                      ]
                    },
                    {
                      "name": "Reentrancy",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "EVM reentrancy"
                      ]
                    },
                    {
                      "name": "TransactionMustComeFromEOA",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "EIP-3607,"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 572,
            "type": {
              "path": [
                "darwinia_message_transact",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MessageTransactError",
                      "fields": [
                        {
                          "name": null,
                          "type": 573,
                          "typeName": "EvmTxErrorWrapper",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "EVM validation errors."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 573,
            "type": {
              "path": [
                "darwinia_message_transact",
                "EvmTxErrorWrapper"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "GasLimitTooLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PriorityFeeTooHigh",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TxNonceTooLow",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TxNonceTooHigh",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidPaymentInput",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidChainId",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 574,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 421
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 89,
                      "typeName": "Number",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 11,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "digest",
                      "type": 14,
                      "typeName": "Digest",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 575,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "storage_types",
                "StoredAuthoritySet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authorities",
                      "type": 576,
                      "typeName": "StoredAuthorityList<<T as Config<I>>::MaxBridgedAuthorities>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 10,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 576,
            "type": {
              "path": [
                "sp_core",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 434
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 433,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 577,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidJustification",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The given justification is invalid for the given header."
                      ]
                    },
                    {
                      "name": "InvalidAuthoritySet",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The authority set from the underlying header chain is invalid."
                      ]
                    },
                    {
                      "name": "TooManyRequests",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "There are too many requests for the current window to handle."
                      ]
                    },
                    {
                      "name": "OldHeader",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The header being imported is older than the best finalized header known to the pallet."
                      ]
                    },
                    {
                      "name": "UnknownHeader",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The header is unknown to the pallet."
                      ]
                    },
                    {
                      "name": "UnsupportedScheduledChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The scheduled authority set change found in the header is unsupported by the pallet.",
                        "",
                        "This is the case for non-standard (e.g forced) authority set changes."
                      ]
                    },
                    {
                      "name": "NotInitialized",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The pallet is not yet initialized."
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The pallet has already been initialized."
                      ]
                    },
                    {
                      "name": "StorageRootMismatch",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The storage proof doesn't contains storage root. So it is invalid for given header."
                      ]
                    },
                    {
                      "name": "TooManyAuthoritiesInSet",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Too many authorities in the set."
                      ]
                    },
                    {
                      "name": "TooLargeHeader",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Too large header."
                      ]
                    },
                    {
                      "name": "BridgeModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 578,
                          "typeName": "bp_runtime::OwnedBridgeModuleError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Error generated by the `OwnedBridgeModule` trait."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 578,
            "type": {
              "path": [
                "bp_runtime",
                "OwnedBridgeModuleError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 579,
            "type": {
              "path": [
                "bp_parachains",
                "ParaInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "best_head_hash",
                      "type": 580,
                      "typeName": "BestParaHeadHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "next_imported_hash_position",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 580,
            "type": {
              "path": [
                "bp_parachains",
                "BestParaHeadHash"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "at_relay_block_number",
                      "type": 4,
                      "typeName": "RelayBlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "head_hash",
                      "type": 11,
                      "typeName": "ParaHash",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 581,
            "type": {
              "path": [
                "bp_polkadot_core",
                "parachains",
                "ParaHead"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 582,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  152,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 583,
            "type": {
              "path": [
                "pallet_bridge_parachains",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnknownRelayChainBlock",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Relay chain block hash is unknown to us."
                      ]
                    },
                    {
                      "name": "InvalidRelayChainBlockNumber",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The number of stored relay block is different from what the relayer has provided."
                      ]
                    },
                    {
                      "name": "InvalidStorageProof",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Invalid storage proof has been passed."
                      ]
                    },
                    {
                      "name": "UnknownParaHead",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Given parachain head is unknown."
                      ]
                    },
                    {
                      "name": "StorageRootMismatch",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The storage proof doesn't contains storage root. So it is invalid for given header."
                      ]
                    },
                    {
                      "name": "FailedToExtractStateRoot",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Failed to extract state root from given parachain head."
                      ]
                    },
                    {
                      "name": "BridgeModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 578,
                          "typeName": "bp_runtime::OwnedBridgeModuleError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Error generated by the `OwnedBridgeModule` trait."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 584,
            "type": {
              "path": [
                "bp_messages",
                "InboundLaneData"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relayers",
                      "type": 585,
                      "typeName": "VecDeque<UnrewardedRelayer<RelayerId>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_confirmed_nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 585,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 586
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 586,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayer"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relayer",
                      "type": 0,
                      "typeName": "RelayerId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages",
                      "type": 161,
                      "typeName": "DeliveredMessages",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 587,
            "type": {
              "path": [
                "bp_messages",
                "OutboundLaneData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "oldest_unpruned_nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_received_nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_generated_nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 588,
            "type": {
              "path": [
                "bp_messages",
                "MessageKey"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane_id",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 589,
            "type": {
              "path": [
                "bp_messages",
                "MessageData"
              ],
              "params": [
                {
                  "name": "Fee",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 13,
                      "typeName": "MessagePayload",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Fee",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 590,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOperatingNormally",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Pallet is not in Normal operating mode."
                      ]
                    },
                    {
                      "name": "MessageIsTooLarge",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The message is too large to be sent over the bridge."
                      ]
                    },
                    {
                      "name": "MessageRejectedByChainVerifier",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Message has been treated as invalid by chain verifier."
                      ]
                    },
                    {
                      "name": "MessageRejectedByLaneVerifier",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Message has been treated as invalid by lane verifier."
                      ]
                    },
                    {
                      "name": "FailedToWithdrawMessageFee",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Submitter has failed to pay fee for delivering and dispatching messages."
                      ]
                    },
                    {
                      "name": "TooManyMessagesInTheProof",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The transaction brings too many messages."
                      ]
                    },
                    {
                      "name": "InvalidMessagesProof",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid messages has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidMessagesDeliveryProof",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Invalid messages delivery proof has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayers",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The bridged chain has invalid `UnrewardedRelayers` in its storage (fatal for the lane)."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayersState",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The relayer has declared invalid unrewarded relayers state in the",
                        "`receive_messages_delivery_proof` call."
                      ]
                    },
                    {
                      "name": "TryingToConfirmMoreMessagesThanExpected",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The number of actually confirmed messages is going to be larger than the number of",
                        "messages in the proof. This may mean that this or bridged chain storage is corrupted."
                      ]
                    },
                    {
                      "name": "BridgeModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 578,
                          "typeName": "bp_runtime::OwnedBridgeModuleError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Error generated by the `OwnedBridgeModule` trait."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 591,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Relayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 592,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 591
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 593,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Order"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 17,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 10,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 52,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "collateral_per_assigned_relayer",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "assigned_relayers",
                      "type": 594,
                      "typeName": "Vec<AssignedRelayer<AccountId, BlockNumber, Balance>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 594,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 595
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 595,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "AssignedRelayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "valid_range",
                      "type": 596,
                      "typeName": "Range<BlockNumber>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 596,
            "type": {
              "path": [
                "Range"
              ],
              "params": [
                {
                  "name": "Idx",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 597,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Insufficient balance."
                      ]
                    },
                    {
                      "name": "AlreadyEnrolled",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The relayer has been enrolled."
                      ]
                    },
                    {
                      "name": "NotEnrolled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This relayer doesn't enroll ever."
                      ]
                    },
                    {
                      "name": "CollateralTooLow",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Locked collateral is too low to cover one order."
                      ]
                    },
                    {
                      "name": "NewCollateralShouldLargerThanBefore",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "New collateral should large than the original one."
                      ]
                    },
                    {
                      "name": "NewCollateralShouldLessThanBefore",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "New collateral should less than the original one."
                      ]
                    },
                    {
                      "name": "StillHasOrdersNotConfirmed",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Update locked collateral is not allow since some orders are not confirm."
                      ]
                    },
                    {
                      "name": "RelayFeeTooLow",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The fee is lower than MinimumRelayFee."
                      ]
                    },
                    {
                      "name": "OccupiedRelayer",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The relayer is occupied, and can't cancel enrollment now."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 598,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 344
                },
                {
                  "name": "Signature",
                  "type": 445
                },
                {
                  "name": "Extra",
                  "type": 599
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 610,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 599,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  600,
                  601,
                  602,
                  603,
                  604,
                  606,
                  607,
                  608,
                  609
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 600,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 601,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 602,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 603,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 604,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 605,
                      "typeName": "Era",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 605,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 49,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 50,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 51,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 52,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 53,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 54,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 55,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 56,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 57,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 58,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 59,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 60,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 61,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 62,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 63,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 64,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 65,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 66,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 67,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 68,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 69,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 70,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 71,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 72,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 73,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 74,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 75,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 76,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 77,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 78,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 79,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 80,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 81,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 82,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 83,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 84,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 85,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 86,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 87,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 88,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 89,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 90,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 91,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 92,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 93,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 94,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 95,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 96,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 97,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 98,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 99,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 100,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 101,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 102,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 103,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 104,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 105,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 106,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 107,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 108,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 109,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 110,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 111,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 112,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 113,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 114,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 115,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 116,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 117,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 118,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 119,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 120,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 121,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 122,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 123,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 124,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 125,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 126,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 127,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 128,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 129,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 130,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 131,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 132,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 133,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 134,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 135,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 136,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 137,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 138,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 139,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 140,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 141,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 142,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 143,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 144,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 145,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 146,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 147,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 148,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 149,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 150,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 151,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 152,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 153,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 154,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 155,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 156,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 157,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 158,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 159,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 160,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 161,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 162,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 163,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 164,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 165,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 166,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 167,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 168,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 169,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 170,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 171,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 172,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 173,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 174,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 175,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 176,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 177,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 178,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 179,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 180,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 181,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 182,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 183,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 184,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 185,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 186,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 187,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 188,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 189,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 190,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 191,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 192,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 193,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 194,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 195,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 196,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 197,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 198,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 199,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 200,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 201,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 202,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 203,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 204,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 205,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 206,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 207,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 208,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 209,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 210,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 211,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 212,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 213,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 214,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 215,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 216,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 217,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 218,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 219,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 220,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 221,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 222,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 223,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 224,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 225,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 226,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 227,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 228,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 229,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 230,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 231,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 232,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 233,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 234,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 235,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 236,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 237,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 238,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 239,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 240,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 241,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 242,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 243,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 244,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 245,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 246,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 247,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 248,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 249,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 250,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 251,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 252,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 253,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 254,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 255,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 606,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 89,
                      "typeName": "T::Index",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 607,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 608,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 92,
                      "typeName": "BalanceOf<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 609,
            "type": {
              "path": [
                "crab_runtime",
                "BridgeRejectObsoleteHeadersAndMessages"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 610,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 0
                },
                {
                  "name": "Call",
                  "type": 344
                },
                {
                  "name": "Signature",
                  "type": 445
                },
                {
                  "name": "Extra",
                  "type": 599
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 13,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 611,
            "type": {
              "path": [
                "crab_runtime",
                "Runtime"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 11
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 14
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 18
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 11,
                    "value": 176
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 177
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 178
          },
          "events": {
            "type": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 182,
              "value": "0x624fd75a00070088526a740200400102c0cd1700010700bcac77510200e000010700e6bd4f570200f00001000002c0cd17000107005e41926e0200300101070088526a7402004001010700a2941a1d0200500002c0cd1700000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 186,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 188,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 189,
              "value": "0x1443726162325044617277696e69614f6666696369616c5275737400000000421800000000000034dd718d5cc53262d401000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000f3ff14d5ab52705903000000ea93e3f16f3d696202000000582211f65bb14b8904000000e65b00e46cedd0aa020000000000000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 39,
              "value": "0x2a00",
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 193
          },
          "index": 0
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "items": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 13
                },
                "fallback": "0x00",
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "type": {
                  "plain": 13
                },
                "fallback": "0x00",
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "type": {
                  "plain": 194
                },
                "fallback": "0x00",
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The relay chain block number associated with the last parachain block."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "type": {
                  "plain": 196
                },
                "fallback": "0x00",
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "type": {
                  "plain": 198
                },
                "fallback": "0x00",
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "type": {
                  "plain": 200
                },
                "fallback": "0x00",
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "type": {
                  "plain": 205
                },
                "fallback": "0x00",
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "type": {
                  "plain": 206
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "type": {
                  "plain": 207
                },
                "fallback": "0x00",
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "type": {
                  "plain": 210
                },
                "fallback": "0x00",
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 181
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 181
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "type": {
                  "plain": 13
                },
                "fallback": "0x00",
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "type": 212
          },
          "events": {
            "type": 30
          },
          "constants": [

          ],
          "errors": {
            "type": 221
          },
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 222
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 10,
              "value": "0x7017000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 2
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "items": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "type": {
                  "plain": 83
                },
                "fallback": "0x64000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 223
          },
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 224
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 228
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": {
            "type": 231
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 232
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 233
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": [

                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 234
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 34
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 10,
                    "value": 235
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 237,
                    "value": 238
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 240,
                    "value": 241
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 10,
                    "value": 242
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "type": 244
          },
          "events": {
            "type": 35
          },
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "type": 4,
              "value": "0xe8030000",
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "errors": {
            "type": 245
          },
          "index": 7
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 246
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 249
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "type": 250
          },
          "events": {
            "type": 37
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x000064a7b3b6e00d0000000000000000",
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "type": 4,
              "value": "0x1c000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 251
          },
          "index": 8
        },
        {
          "name": "Deposit",
          "storage": {
            "prefix": "Deposit",
            "items": [
              {
                "name": "Deposits",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 252
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All deposits.",
                  "",
                  " The items must be sorted by the id."
                ]
              }
            ]
          },
          "calls": {
            "type": 255
          },
          "events": {
            "type": 38
          },
          "constants": [
            {
              "name": "MinLockingAmount",
              "type": 6,
              "value": "0x000064a7b3b6e00d0000000000000000",
              "docs": [
                " Minimum amount to lock at least."
              ]
            },
            {
              "name": "MaxDeposits",
              "type": 4,
              "value": "0x00020000",
              "docs": [
                " Maximum deposit count.",
                "",
                " In currently design, this should not be greater than `u16::MAX`."
              ]
            }
          ],
          "errors": {
            "type": 256
          },
          "index": 9
        },
        {
          "name": "AccountMigration",
          "storage": {
            "prefix": "AccountMigration",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 41,
                    "value": 3
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`frame_system::Account`] data.",
                  "",
                  " <https://github.dev/paritytech/substrate/blob/19162e43be45817b44c7d48e50d03f074f60fbf4/frame/system/src/lib.rs#L545>"
                ]
              },
              {
                "name": "KtonAccounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 41,
                    "value": 257
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`pallet_asset::AssetAccount`] data.",
                  "",
                  " https://github.dev/paritytech/substrate/blob/polkadot-v0.9.30/frame/assets/src/types.rs#L115"
                ]
              },
              {
                "name": "Vestings",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 41,
                    "value": 248
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`pallet_vesting::Vesting`] data.",
                  "",
                  " <https://github.dev/paritytech/substrate/blob/19162e43be45817b44c7d48e50d03f074f60fbf4/frame/vesting/src/lib.rs#L188>"
                ]
              },
              {
                "name": "Deposits",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 41,
                    "value": 254
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`darwinia_deposit::Deposits`] data."
                ]
              },
              {
                "name": "Identities",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 41,
                    "value": 259
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`pallet_identity::IdentityOf`] data.",
                  "",
                  " <https://github.com/paritytech/substrate/blob/polkadot-v0.9.30/frame/identity/src/lib.rs#L163>"
                ]
              },
              {
                "name": "Ledgers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 41,
                    "value": 298
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " [`darwinia_staking::Ledgers`] data."
                ]
              },
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 41,
                    "value": 44
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Multisig migration caches."
                ]
              }
            ]
          },
          "calls": {
            "type": 306
          },
          "events": {
            "type": 40
          },
          "constants": [

          ],
          "errors": {
            "type": 310
          },
          "index": 10
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 11
        },
        {
          "name": "DarwiniaStaking",
          "storage": {
            "prefix": "DarwiniaStaking",
            "items": [
              {
                "name": "Ledgers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 298
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All staking ledgers."
                ]
              },
              {
                "name": "RingPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total staked RING.",
                  "",
                  " This will count RING + deposit(locking RING)."
                ]
              },
              {
                "name": "KtonPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total staked KTON."
                ]
              },
              {
                "name": "Collators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 311
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from (wannabe) collator to the preferences of that collator."
                ]
              },
              {
                "name": "Exposures",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 312
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stakers' exposure."
                ]
              },
              {
                "name": "CollatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of active collators."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator to their nomination preferences, namely the collator that",
                  " they wish to support."
                ]
              },
              {
                "name": "RewardPoints",
                "modifier": "Default",
                "type": {
                  "plain": 315
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Collator's reward points."
                ]
              },
              {
                "name": "SessionStartTime",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Active session's start-time."
                ]
              },
              {
                "name": "ElapsedTime",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Elapsed time."
                ]
              }
            ]
          },
          "calls": {
            "type": 319
          },
          "events": {
            "type": 47
          },
          "constants": [
            {
              "name": "MinStakingDuration",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " Minimum time to stake at least."
              ]
            },
            {
              "name": "PayoutFraction",
              "type": 311,
              "value": "0x0084d717",
              "docs": [
                " The percentage of the total payout that is distributed to stakers.",
                "",
                " Usually, the rest goes to the treasury."
              ]
            },
            {
              "name": "MaxDeposits",
              "type": 4,
              "value": "0x00020000",
              "docs": [
                " Maximum deposit count."
              ]
            },
            {
              "name": "MaxUnstakings",
              "type": 4,
              "value": "0x10000000",
              "docs": [
                " Maximum unstaking/unbonding count."
              ]
            }
          ],
          "errors": {
            "type": 320
          },
          "index": 12
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 43
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 321
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 326
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 323
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 327,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": 329
          },
          "events": {
            "type": 49
          },
          "constants": [

          ],
          "errors": {
            "type": 330
          },
          "index": 13
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 331
                },
                "fallback": "0x00",
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 333
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 14
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 331
                },
                "fallback": "0x00",
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 15
        },
        {
          "name": "MessageGadget",
          "storage": {
            "prefix": "MessageGadget",
            "items": [
              {
                "name": "CommitmentContract",
                "modifier": "Default",
                "type": {
                  "plain": 139
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 334
          },
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 16
        },
        {
          "name": "EcdsaAuthority",
          "storage": {
            "prefix": "EcdsaAuthority",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 335
                },
                "fallback": "0x00",
                "docs": [
                  " The current active authorities."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 335
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The nonce of the current active authorities. AKA term/session/era."
                ]
              },
              {
                "name": "AuthoritiesChangeToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 336
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change waiting for signing."
                ]
              },
              {
                "name": "MessageRootToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 338
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming message root waiting for signing."
                ]
              }
            ]
          },
          "calls": {
            "type": 339
          },
          "events": {
            "type": 50
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " The maximum number of authorities."
              ]
            },
            {
              "name": "ChainId",
              "type": 10,
              "value": "0x2c00000000000000",
              "docs": [
                " Chain's ID, which is using for constructing the message. (follow EIP-712 SPEC)"
              ]
            },
            {
              "name": "SignThreshold",
              "type": 311,
              "value": "0x0046c323",
              "docs": [
                " The signing threshold.",
                "",
                " Once `signatures_count / authorities_count >= threshold`, we say the message is trusted."
              ]
            },
            {
              "name": "SyncInterval",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The interval of checking the message root.",
                " This must be shorter than [`Config::MaxPendingPeriod`]."
              ]
            },
            {
              "name": "MaxPendingPeriod",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " How long should we wait for the message root to be signed.",
                "",
                " If the collecting new message root signatures process takes more than",
                " `MaxPendingPeriod`, we will drop the root. And update the root with a new one."
              ]
            }
          ],
          "errors": {
            "type": 340
          },
          "index": 17
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 341
                },
                "fallback": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 455
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 457
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 460
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 466
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 467
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 36
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              }
            ]
          },
          "calls": {
            "type": 345
          },
          "events": {
            "type": 58
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x00e10000",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0xe0c40000",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0xe0c40000",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0x00e10000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x00002059dd64f00c0f01000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 36,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x84030000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0xe0c40000",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            },
            {
              "name": "MaxDeposits",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of deposits a public proposal may have at any time."
              ]
            },
            {
              "name": "MaxBlacklisted",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of items which can be blacklisted."
              ]
            }
          ],
          "errors": {
            "type": 468
          },
          "index": 18
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 469
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 344
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 470
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 43
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 347
          },
          "events": {
            "type": 62
          },
          "constants": [

          ],
          "errors": {
            "type": 471
          },
          "index": 19
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 469
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 344
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 470
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 43
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 350
          },
          "events": {
            "type": 65
          },
          "constants": [

          ],
          "errors": {
            "type": 472
          },
          "index": 20
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 473
                },
                "fallback": "0x00",
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "plain": 473
                },
                "fallback": "0x00",
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 67
                },
                "fallback": "0x00",
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 475
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 351
          },
          "events": {
            "type": 66
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 104,
              "value": "0x706872656c656374",
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": "0x00008a5d784563010000000000000000",
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": "0x0000a081f11ade6b0500000000000000",
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": "0x0000480f625e0b000000000000000000",
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0x201c0000",
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            },
            {
              "name": "MaxCandidates",
              "type": 4,
              "value": "0x1e000000",
              "docs": [
                " The maximum number of candidates in a phragmen election.",
                "",
                " Warning: The election happens onchain, and this value will determine",
                " the size of the election. When this limit is reached no more",
                " candidates are accepted in the election."
              ]
            },
            {
              "name": "MaxVoters",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " The maximum number of voters to allow in a phragmen election.",
                "",
                " Warning: This impacts the size of the election which is run onchain.",
                " When the limit is reached the new voters are ignored."
              ]
            }
          ],
          "errors": {
            "type": 476
          },
          "index": 21
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 456
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 353
          },
          "events": {
            "type": 69
          },
          "constants": [

          ],
          "errors": {
            "type": 477
          },
          "index": 22
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 478
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 479
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 354
          },
          "events": {
            "type": 70
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 480,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x00002059dd64f00c0f01000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 173,
              "value": "0x00",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0xc0a80000",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 480,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 481,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": {
            "type": 482
          },
          "index": 23
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "items": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 483
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 355
          },
          "events": {
            "type": 71
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "type": 4,
              "value": "0x201c0000",
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "type": 484,
              "value": "0x14",
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "errors": {
            "type": 485
          },
          "index": 24
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 356
          },
          "events": {
            "type": 72
          },
          "constants": [

          ],
          "errors": {
            "type": 486
          },
          "index": 25
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 357
          },
          "events": {
            "type": 74
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 487
          },
          "index": 26
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 488
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 370
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 490
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 491
                },
                "fallback": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "type": 368
          },
          "events": {
            "type": 75
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x008044fe2307236c0500000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x0080843faa7217000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x00405fcc7f32da6b0500000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": {
            "type": 495
          },
          "index": 27
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "IncompleteSince",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 496
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 12,
                    "value": 77
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": {
            "type": 373
          },
          "events": {
            "type": 76
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x0700a0db215d02000001",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block."
              ]
            }
          ],
          "errors": {
            "type": 500
          },
          "index": 28
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "items": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 501
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 502,
                    "value": 503
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 375
          },
          "events": {
            "type": 78
          },
          "constants": [

          ],
          "errors": {
            "type": 504
          },
          "index": 29
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 505
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 509
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 376
          },
          "events": {
            "type": 79
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x0000e2e6c535ca6b0500000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x0040c21f55b90b000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x0000e2e6c535ca6b0500000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x0080843faa7217000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 513
          },
          "index": 30
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "items": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 514
                },
                "fallback": "0x00",
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Twox64Concat"
                    ],
                    "key": 520,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 521
                },
                "fallback": "0x00",
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Twox64Concat"
                    ],
                    "key": 524,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 83,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "type": {
                  "plain": 525
                },
                "fallback": "0x020000000500000001000000821a06000008000700c817a80402000400",
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 526
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "type": {
                  "plain": 36
                },
                "fallback": "0x00",
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": {
            "type": 378
          },
          "events": {
            "type": 81
          },
          "constants": [

          ],
          "errors": {
            "type": 527
          },
          "index": 32
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "items": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 10,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat"
                    ],
                    "key": 533,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat"
                    ],
                    "key": 533,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat"
                    ],
                    "key": 533,
                    "value": 534
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "type": {
                  "plain": 535
                },
                "fallback": "0x00",
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "type": {
                  "plain": 538
                },
                "fallback": "0x00",
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 540,
                    "value": 542
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 543
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              }
            ]
          },
          "calls": {
            "type": 379
          },
          "events": {
            "type": 84
          },
          "constants": [

          ],
          "errors": {
            "type": 546
          },
          "index": 33
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": {
            "type": 400
          },
          "events": {
            "type": 136
          },
          "constants": [

          ],
          "errors": {
            "type": 547
          },
          "index": 34
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "items": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "type": {
                  "plain": 548
                },
                "fallback": "0x0700e40b540202000400",
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "type": {
                  "plain": 549
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 4,
                    "value": 550
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 10,
                    "value": 551
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The overweight messages."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              }
            ]
          },
          "calls": {
            "type": 401
          },
          "events": {
            "type": 137
          },
          "constants": [

          ],
          "errors": {
            "type": 552
          },
          "index": 35
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "plain": 553
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "plain": 562
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "plain": 567
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "plain": 568
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 405,
                    "value": 11
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 402
          },
          "events": {
            "type": 138
          },
          "constants": [

          ],
          "errors": {
            "type": 569
          },
          "index": 36
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 139,
                    "value": 13
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 570,
                    "value": 11
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 414
          },
          "events": {
            "type": 148
          },
          "constants": [

          ],
          "errors": {
            "type": 571
          },
          "index": 37
        },
        {
          "name": "MessageTransact",
          "storage": null,
          "calls": {
            "type": 418
          },
          "events": null,
          "constants": [

          ],
          "errors": {
            "type": 572
          },
          "index": 38
        },
        {
          "name": "BridgePolkadotGrandpa",
          "storage": {
            "prefix": "BridgePolkadotGrandpa",
            "items": [
              {
                "name": "RequestCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current number of requests which have written to storage.",
                  "",
                  " If the `RequestCount` hits `MaxRequests`, no more calls will be allowed to the pallet until",
                  " the request capacity is increased.",
                  "",
                  " The `RequestCount` is decreased by one at the beginning of every block. This is to ensure",
                  " that the pallet can always make progress."
                ]
              },
              {
                "name": "InitialHash",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the header used to bootstrap the pallet."
                ]
              },
              {
                "name": "BestFinalized",
                "modifier": "Optional",
                "type": {
                  "plain": 437
                },
                "fallback": "0x00",
                "docs": [
                  " Hash of the best finalized header."
                ]
              },
              {
                "name": "ImportedHashes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A ring buffer of imported hashes. Ordered by the insertion time."
                ]
              },
              {
                "name": "ImportedHashesPointer",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current ring buffer position."
                ]
              },
              {
                "name": "ImportedHeaders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 574
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Headers which have been imported into the pallet."
                ]
              },
              {
                "name": "CurrentAuthoritySet",
                "modifier": "Default",
                "type": {
                  "plain": 575
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The current GRANDPA Authority set."
                ]
              },
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "plain": 435
                },
                "fallback": "0x00",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, or no transactions will be allowed."
                ]
              }
            ]
          },
          "calls": {
            "type": 419
          },
          "events": null,
          "constants": [
            {
              "name": "MaxRequests",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The upper bound on the number of requests allowed by the pallet.",
                "",
                " A request refers to an action which writes a header to storage.",
                "",
                " Once this bound is reached the pallet will not allow any dispatchables to be called",
                " until the request count has decreased."
              ]
            },
            {
              "name": "HeadersToKeep",
              "type": 4,
              "value": "0xf4010000",
              "docs": [
                " Maximal number of finalized headers to keep in the storage.",
                "",
                " The setting is there to prevent growing the on-chain state indefinitely. Note",
                " the setting does not relate to block numbers - we will simply keep as much items",
                " in the storage, so it doesn't guarantee any fixed timeframe for finality headers.",
                "",
                " Incautious change of this constant may lead to orphan entries in the runtime storage."
              ]
            },
            {
              "name": "MaxBridgedAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max number of authorities at the bridged chain."
              ]
            },
            {
              "name": "MaxBridgedHeaderSize",
              "type": 4,
              "value": "0x00000100",
              "docs": [
                " Maximal size (in bytes) of the SCALE-encoded bridged chain header.",
                "",
                " This constant must be selected with care. The pallet requires mandatory headers to be",
                " submitted to be able to proceed. Mandatory headers contain public keys of all GRANDPA",
                " authorities. E.g. for 1024 authorities, the size of encoded keys will be at least 32 KB.",
                " The same header may also contain other digest items as well, so some reserve here",
                " is required."
              ]
            }
          ],
          "errors": {
            "type": 577
          },
          "index": 39
        },
        {
          "name": "BridgePolkadotParachain",
          "storage": {
            "prefix": "BridgePolkadotParachain",
            "items": [
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume them. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "plain": 435
                },
                "fallback": "0x00",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, or no transactions will be allowed."
                ]
              },
              {
                "name": "ParasInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 152,
                    "value": 579
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Parachains info.",
                  "",
                  " Contains the following info:",
                  " - best parachain head hash",
                  " - the head of the `ImportedParaHashes` ring buffer"
                ]
              },
              {
                "name": "ImportedParaHeads",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 439,
                    "value": 581
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Parachain heads which have been imported into the pallet."
                ]
              },
              {
                "name": "ImportedParaHashes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Twox64Concat"
                    ],
                    "key": 582,
                    "value": 11
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A ring buffer of imported parachain head hashes. Ordered by the insertion time."
                ]
              }
            ]
          },
          "calls": {
            "type": 436
          },
          "events": {
            "type": 151
          },
          "constants": [
            {
              "name": "ParasPalletName",
              "type": 145,
              "value": "0x145061726173",
              "docs": [
                " Name of the original `paras` pallet in the `construct_runtime!()` call at the bridged",
                " chain.",
                "",
                " Please keep in mind that this should be the name of the `runtime_parachains::paras`",
                " pallet from polkadot repository, not the `pallet-bridge-parachains`."
              ]
            },
            {
              "name": "HeadsToKeep",
              "type": 4,
              "value": "0xf4010000",
              "docs": [
                " Maximal number of single parachain heads to keep in the storage.",
                "",
                " The setting is there to prevent growing the on-chain state indefinitely. Note",
                " the setting does not relate to parachain block numbers - we will simply keep as much",
                " items in the storage, so it doesn't guarantee any fixed timeframe for heads.",
                "",
                " Incautious change of this constant may lead to orphan entries in the runtime storage."
              ]
            },
            {
              "name": "MaxParaHeadSize",
              "type": 4,
              "value": "0x00040000",
              "docs": [
                " Maximal size (in bytes) of the SCALE-encoded parachain head.",
                "",
                " Keep in mind that the size of any tracked parachain header must not exceed this value.",
                " So if you're going to track multiple parachains, one of which is storing large digests",
                " in its headers, you shall choose this maximal value.",
                "",
                " There's no mandatory headers in this pallet, so it can't stall if there's some header",
                " that exceeds this bound."
              ]
            }
          ],
          "errors": {
            "type": 583
          },
          "index": 40
        },
        {
          "name": "BridgeDarwiniaMessages",
          "storage": {
            "prefix": "BridgeDarwiniaMessages",
            "items": [
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "plain": 442
                },
                "fallback": "0x0000",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, some, or no transactions will be allowed."
                ]
              },
              {
                "name": "InboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 17,
                    "value": 584
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " Map of lane id => inbound lane data."
                ]
              },
              {
                "name": "OutboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 17,
                    "value": 587
                  }
                },
                "fallback": "0x010000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of lane id => outbound lane data."
                ]
              },
              {
                "name": "OutboundMessages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 588,
                    "value": 589
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All queued outbound messages."
                ]
              }
            ]
          },
          "calls": {
            "type": 441
          },
          "events": {
            "type": 153
          },
          "constants": [
            {
              "name": "BridgedChainId",
              "type": 17,
              "value": "0x64617277",
              "docs": [
                " Gets the chain id value from the instance."
              ]
            },
            {
              "name": "MaximalOutboundPayloadSize",
              "type": 4,
              "value": "0x00002800",
              "docs": [
                " Maximal size of the outbound payload."
              ]
            }
          ],
          "errors": {
            "type": 590
          },
          "index": 41
        },
        {
          "name": "BridgeDarwiniaDispatch",
          "storage": null,
          "calls": {
            "type": 451
          },
          "events": {
            "type": 164
          },
          "constants": [

          ],
          "errors": null,
          "index": 42
        },
        {
          "name": "DarwiniaFeeMarket",
          "storage": {
            "prefix": "DarwiniaFeeMarket",
            "items": [
              {
                "name": "RelayersMap",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 591
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Relayers",
                "modifier": "Optional",
                "type": {
                  "plain": 43
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayers",
                "modifier": "Optional",
                "type": {
                  "plain": 592
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Orders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 165,
                    "value": 593
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "CollateralSlashProtect",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayersNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x03000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 452
          },
          "events": {
            "type": 169
          },
          "constants": [
            {
              "name": "TreasuryPalletId",
              "type": 481,
              "value": "0x64612f7472737279",
              "docs": [
                " Some reward goes to Treasury."
              ]
            },
            {
              "name": "LockId",
              "type": 104,
              "value": "0x64612f6665656372",
              "docs": [

              ]
            },
            {
              "name": "MinimumRelayFee",
              "type": 6,
              "value": "0x0000dcce86b42ad00000000000000000",
              "docs": [
                " The minimum fee for relaying."
              ]
            },
            {
              "name": "CollateralPerOrder",
              "type": 6,
              "value": "0x000088b116afe3b50200000000000000",
              "docs": [
                " The collateral relayer need to lock for each order.",
                "",
                " This also represents the maximum slash value for a single delayed order.",
                " Please note that if this value is set to zero the fee market will be suspended."
              ]
            },
            {
              "name": "Slot",
              "type": 4,
              "value": "0x58020000",
              "docs": [
                " The slot times set"
              ]
            },
            {
              "name": "DutyRelayersRewardRatio",
              "type": 480,
              "value": "0xc0270900",
              "docs": [
                " Reward parameters"
              ]
            },
            {
              "name": "MessageRelayersRewardRatio",
              "type": 480,
              "value": "0x00350c00",
              "docs": [

              ]
            },
            {
              "name": "ConfirmRelayersRewardRatio",
              "type": 480,
              "value": "0x400d0300",
              "docs": [

              ]
            },
            {
              "name": "AssignedRelayerSlashRatio",
              "type": 480,
              "value": "0x400d0300",
              "docs": [
                " The slash ratio for assigned relayers."
              ]
            }
          ],
          "errors": {
            "type": 597
          },
          "index": 43
        }
      ],
      "extrinsic": {
        "type": 598,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": 600,
            "additionalSigned": 64
          },
          {
            "identifier": "CheckSpecVersion",
            "type": 601,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 602,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 603,
            "additionalSigned": 11
          },
          {
            "identifier": "CheckMortality",
            "type": 604,
            "additionalSigned": 11
          },
          {
            "identifier": "CheckNonce",
            "type": 606,
            "additionalSigned": 64
          },
          {
            "identifier": "CheckWeight",
            "type": 607,
            "additionalSigned": 64
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 608,
            "additionalSigned": 64
          },
          {
            "identifier": "BridgeRejectObsoleteHeadersAndMessages",
            "type": 609,
            "additionalSigned": 64
          }
        ]
      },
      "type": 611
    }
  }
}